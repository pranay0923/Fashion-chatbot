# fashion_image_chat.py
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 352,
   "id": "fa31d5ad-0468-40fb-a519-bd5211f6b851",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 1: IMPORT ALL REQUIRED LIBRARIES =====\n",
    "import os\n",
    "import json\n",
    "import sqlite3\n",
    "import base64\n",
    "from datetime import datetime\n",
    "from PIL import Image\n",
    "import io\n",
    "import requests\n",
    "from getpass import getpass\n",
    "import openai  # Added this import\n",
    "\n",
    "# LangChain imports\n",
    "from langchain_openai import ChatOpenAI, OpenAIEmbeddings\n",
    "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
    "from langchain_community.vectorstores import FAISS\n",
    "from langchain.docstore.document import Document\n",
    "from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\n",
    "from langchain.chains import create_history_aware_retriever, create_retrieval_chain\n",
    "from langchain.chains.combine_documents import create_stuff_documents_chain\n",
    "from langchain_community.chat_message_histories import SQLChatMessageHistory\n",
    "from langchain_core.runnables.history import RunnableWithMessageHistory\n",
    "from langchain_core.runnables import RunnablePassthrough\n",
    "from langchain_core.output_parsers import StrOutputParser\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "id": "ed5872ec-d911-474d-b124-8ec4220690ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your API Token here:  ········\n"
     ]
    }
   ],
   "source": [
    "# ===== PART 2: OPENAI API SETUP =====\n",
    "from getpass import getpass\n",
    "OPENAI_KEY = getpass(\"Enter your API Token here: \")\n",
    "os.environ['OPENAI_API_KEY'] = OPENAI_KEY\n",
    "\n",
    "# Initialize OpenAI models\n",
    "chatgpt = ChatOpenAI(model_name=\"gpt-4o\", temperature=0.1)\n",
    "openai_embed_model = OpenAIEmbeddings(model=\"text-embedding-3-small\")\n",
    "\n",
    "# Initialize native OpenAI client for image analysis\n",
    "openai_native_client = openai.OpenAI(api_key=OPENAI_KEY)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "da876023-5abf-476f-a294-d1db392c5df3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 3: ENHANCED DATABASE CLASS =====\n",
    "class FashionDatabase:\n",
    "    \"\"\"Enhanced database class with image support\"\"\"\n",
    "    \n",
    "    def __init__(self, db_path=\"fashion_data.db\"):\n",
    "        self.db_path = db_path\n",
    "        self.init_database()\n",
    "    \n",
    "    def init_database(self):\n",
    "        \"\"\"Initialize database with all required tables\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        \n",
    "        # Fashion products table (original)\n",
    "        cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS products (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            name TEXT NOT NULL,\n",
    "            category TEXT,\n",
    "            subcategory TEXT,\n",
    "            brand TEXT,\n",
    "            price REAL,\n",
    "            color TEXT,\n",
    "            size TEXT,\n",
    "            description TEXT,\n",
    "            style_tags TEXT,\n",
    "            season TEXT,\n",
    "            gender TEXT,\n",
    "            occasion TEXT,\n",
    "            material TEXT,\n",
    "            image_url TEXT,\n",
    "            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n",
    "        )\n",
    "        ''')\n",
    "        \n",
    "        # NEW: User uploaded images table\n",
    "        cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS user_images (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            user_id TEXT NOT NULL,\n",
    "            image_path TEXT NOT NULL,\n",
    "            image_description TEXT,\n",
    "            detected_items TEXT,\n",
    "            color_analysis TEXT,\n",
    "            style_analysis TEXT,\n",
    "            upload_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n",
    "        )\n",
    "        ''')\n",
    "        \n",
    "        # Enhanced user behavior tracking\n",
    "        cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS user_behavior (\n",
    "            id INTEGER PRIMARY KEY,\n",
    "            user_id TEXT NOT NULL,\n",
    "            action_type TEXT NOT NULL,\n",
    "            product_id INTEGER,\n",
    "            image_id INTEGER,\n",
    "            query TEXT,\n",
    "            preferences TEXT,\n",
    "            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n",
    "            FOREIGN KEY (product_id) REFERENCES products (id),\n",
    "            FOREIGN KEY (image_id) REFERENCES user_images (id)\n",
    "        )\n",
    "        ''')\n",
    "        \n",
    "        # User preferences table\n",
    "        cursor.execute('''\n",
    "        CREATE TABLE IF NOT EXISTS user_preferences (\n",
    "            user_id TEXT PRIMARY KEY,\n",
    "            preferred_colors TEXT,\n",
    "            preferred_brands TEXT,\n",
    "            preferred_styles TEXT,\n",
    "            size_preference TEXT,\n",
    "            budget_range TEXT,\n",
    "            body_type TEXT,\n",
    "            style_personality TEXT,\n",
    "            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n",
    "        )\n",
    "        ''')\n",
    "        \n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        print(\"✅ Database initialized successfully!\")\n",
    "    \n",
    "    def add_product(self, **product_data):\n",
    "        \"\"\"Add a new fashion product to database\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        \n",
    "        placeholders = ', '.join(['?' for _ in product_data])\n",
    "        columns = ', '.join(product_data.keys())\n",
    "        sql = f\"INSERT INTO products ({columns}) VALUES ({placeholders})\"\n",
    "        \n",
    "        cursor.execute(sql, list(product_data.values()))\n",
    "        product_id = cursor.lastrowid\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        return product_id\n",
    "    \n",
    "    def get_all_products(self):\n",
    "        \"\"\"Get all products from database\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT * FROM products\")\n",
    "        products = cursor.fetchall()\n",
    "        conn.close()\n",
    "        return products\n",
    "    \n",
    "    def save_user_image(self, user_id, image_path, description=None, detected_items=None, \n",
    "                       color_analysis=None, style_analysis=None):\n",
    "        \"\"\"Save user uploaded image with analysis results\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute('''\n",
    "        INSERT INTO user_images (user_id, image_path, image_description, \n",
    "                                detected_items, color_analysis, style_analysis)\n",
    "        VALUES (?, ?, ?, ?, ?, ?)\n",
    "        ''', (user_id, image_path, description, \n",
    "              json.dumps(detected_items) if detected_items else None,\n",
    "              json.dumps(color_analysis) if color_analysis else None,\n",
    "              json.dumps(style_analysis) if style_analysis else None))\n",
    "        image_id = cursor.lastrowid\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        return image_id\n",
    "    \n",
    "    def get_user_images(self, user_id, limit=10):\n",
    "        \"\"\"Get user's uploaded images\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute('''\n",
    "        SELECT * FROM user_images \n",
    "        WHERE user_id = ? \n",
    "        ORDER BY upload_timestamp DESC \n",
    "        LIMIT ?\n",
    "        ''', (user_id, limit))\n",
    "        result = cursor.fetchall()\n",
    "        conn.close()\n",
    "        return result\n",
    "    \n",
    "    def track_user_behavior(self, user_id, action_type, product_id=None, image_id=None, query=None, preferences=None):\n",
    "        \"\"\"Track user behavior for recommendations\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute('''\n",
    "        INSERT INTO user_behavior (user_id, action_type, product_id, image_id, query, preferences)\n",
    "        VALUES (?, ?, ?, ?, ?, ?)\n",
    "        ''', (user_id, action_type, product_id, image_id, query, \n",
    "              json.dumps(preferences) if preferences else None))\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "    \n",
    "    def update_user_preferences(self, user_id, preferences):\n",
    "        \"\"\"Update user preferences\"\"\"\n",
    "        conn = sqlite3.connect(self.db_path)\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute('''\n",
    "        INSERT OR REPLACE INTO user_preferences \n",
    "        (user_id, preferred_colors, preferred_brands, preferred_styles, \n",
    "         size_preference, budget_range, body_type, style_personality)\n",
    "        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n",
    "        ''', (user_id, \n",
    "              json.dumps(preferences.get('colors', [])),\n",
    "              json.dumps(preferences.get('brands', [])),\n",
    "              json.dumps(preferences.get('styles', [])),\n",
    "              preferences.get('size', ''),\n",
    "              preferences.get('budget', ''),\n",
    "              preferences.get('body_type', ''),\n",
    "              preferences.get('style_personality', '')))\n",
    "        conn.commit()\n",
    "        conn.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "b91f65f4-8a08-4167-9d9c-4ab5eb3b3347",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 4: IMAGE ANALYSIS SERVICE (FIXED) =====\n",
    "class ImageAnalysisService:\n",
    "    \"\"\"Service for analyzing fashion images using AI\"\"\"\n",
    "    \n",
    "    def __init__(self, openai_native_client):\n",
    "        self.openai_client = openai_native_client  # Use native OpenAI client\n",
    "    \n",
    "    def analyze_fashion_image(self, image_path_or_base64, user_query=None):\n",
    "        \"\"\"Analyze fashion items in uploaded image using GPT-4 Vision\"\"\"\n",
    "        try:\n",
    "            # Prepare the image data\n",
    "            if image_path_or_base64.startswith('data:image'):\n",
    "                # Already base64 encoded\n",
    "                image_data = image_path_or_base64\n",
    "            else:\n",
    "                # Convert file path to base64\n",
    "                with open(image_path_or_base64, \"rb\") as image_file:\n",
    "                    image_content = base64.b64encode(image_file.read()).decode('utf-8')\n",
    "                image_data = f\"data:image/jpeg;base64,{image_content}\"\n",
    "            \n",
    "            # Create detailed analysis prompt\n",
    "            analysis_prompt = f\"\"\"\n",
    "            Analyze this fashion image and provide detailed information in the following categories:\n",
    "            \n",
    "            1. **Clothing Items**: List all visible clothing items with detailed descriptions\n",
    "            2. **Colors**: Identify dominant colors and overall color palette\n",
    "            3. **Style Analysis**: Describe the fashion style, aesthetic, and overall vibe\n",
    "            4. **Occasion**: What occasions would this outfit be suitable for\n",
    "            5. **Season**: What season is this outfit appropriate for\n",
    "            6. **Body Type**: What body types would this outfit flatter\n",
    "            7. **Styling Tips**: Specific advice on how to style or improve this look\n",
    "            8. **Similar Items**: Suggest what similar items to look for\n",
    "            \n",
    "            User's specific question: {user_query if user_query else \"General fashion analysis\"}\n",
    "            \n",
    "            Please provide a detailed response in JSON format with the above categories as keys.\n",
    "            \"\"\"\n",
    "            \n",
    "            # Call OpenAI GPT-4 Vision API using the correct native client\n",
    "            response = self.openai_client.chat.completions.create(\n",
    "                model=\"gpt-4o\",  # Using gpt-4o which supports vision\n",
    "                messages=[\n",
    "                    {\n",
    "                        \"role\": \"user\",\n",
    "                        \"content\": [\n",
    "                            {\"type\": \"text\", \"text\": analysis_prompt},\n",
    "                            {\"type\": \"image_url\", \"image_url\": {\"url\": image_data}}\n",
    "                        ]\n",
    "                    }\n",
    "                ],\n",
    "                max_tokens=1000\n",
    "            )\n",
    "            \n",
    "            # Parse the response\n",
    "            analysis_text = response.choices[0].message.content\n",
    "            \n",
    "            # Try to parse as JSON, fallback to raw text if fails\n",
    "            try:\n",
    "                analysis_json = json.loads(analysis_text)\n",
    "            except json.JSONDecodeError:\n",
    "                # If JSON parsing fails, structure the response\n",
    "                analysis_json = {\n",
    "                    \"raw_analysis\": analysis_text,\n",
    "                    \"clothing_items\": \"Analysis available in raw_analysis\",\n",
    "                    \"colors\": \"Analysis available in raw_analysis\",\n",
    "                    \"style_analysis\": \"Analysis available in raw_analysis\"\n",
    "                }\n",
    "            \n",
    "            return analysis_json\n",
    "        \n",
    "        except Exception as e:\n",
    "            return {\n",
    "                \"error\": str(e), \n",
    "                \"message\": \"Failed to analyze image. Please check your image file and API key.\"\n",
    "            }\n",
    "    \n",
    "    def extract_colors_from_image(self, image_path):\n",
    "        \"\"\"Extract dominant colors from image using PIL\"\"\"\n",
    "        try:\n",
    "            # Open and process the image\n",
    "            image = Image.open(image_path)\n",
    "            image = image.convert('RGB')\n",
    "            \n",
    "            # Get dominant colors\n",
    "            colors = image.getcolors(maxcolors=256*256*256)\n",
    "            if colors:\n",
    "                # Sort by frequency and get top 5 colors\n",
    "                dominant_colors = sorted(colors, key=lambda x: x[0], reverse=True)[:5]\n",
    "                color_info = []\n",
    "                \n",
    "                for count, rgb in dominant_colors:\n",
    "                    color_info.append({\n",
    "                        \"rgb\": rgb,\n",
    "                        \"hex\": \"#{:02x}{:02x}{:02x}\".format(*rgb),\n",
    "                        \"frequency\": count,\n",
    "                        \"percentage\": round((count / sum([c[0] for c in colors])) * 100, 2)\n",
    "                    })\n",
    "                \n",
    "                return color_info\n",
    "        \n",
    "        except Exception as e:\n",
    "            return {\"error\": str(e)}\n",
    "        \n",
    "        return []\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "2e1a82e0-f135-4814-8f04-5a6d23890363",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 5: RECOMMENDATION ENGINE (FIXED) =====\n",
    "class FashionRecommendationEngine:\n",
    "    \"\"\"Enhanced recommendation engine for fashion products\"\"\"\n",
    "    \n",
    "    def __init__(self, fashion_db):\n",
    "        self.fashion_db = fashion_db\n",
    "    \n",
    "    def get_personalized_recommendations(self, user_id, query, limit=5):\n",
    "        \"\"\"Get personalized product recommendations\"\"\"\n",
    "        try:\n",
    "            products = self.fashion_db.get_all_products()\n",
    "            if not products:\n",
    "                return []\n",
    "            \n",
    "            # Convert products to recommendation format\n",
    "            recommendations = []\n",
    "            for product in products[:limit]:\n",
    "                rec = {\n",
    "                    'product_id': product[0],\n",
    "                    'name': product[1],\n",
    "                    'category': product[2] if len(product) > 2 else 'Fashion Item',\n",
    "                    'brand': product[4] if len(product) > 4 else 'Unknown Brand',\n",
    "                    'price': product[5] if len(product) > 5 else 0,\n",
    "                    'color': product[6] if len(product) > 6 else 'Various',\n",
    "                    'description': product[8] if len(product) > 8 else 'Stylish fashion item'\n",
    "                }\n",
    "                recommendations.append(rec)\n",
    "            \n",
    "            return recommendations\n",
    "        \n",
    "        except Exception as e:\n",
    "            print(f\"Error getting recommendations: {e}\")\n",
    "            return []\n",
    "    \n",
    "    def analyze_user_preferences(self, user_id):\n",
    "        \"\"\"Analyze user preferences from behavior\"\"\"\n",
    "        # Simple preference analysis - can be enhanced\n",
    "        return {\n",
    "            'preferred_colors': ['blue', 'black', 'white'],\n",
    "            'preferred_brands': ['Nike', 'Adidas'],\n",
    "            'preferred_styles': ['casual', 'sporty'],\n",
    "            'budget_range': 'medium'\n",
    "        }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "id": "dae1bd69-d308-42b6-8c95-dde770051c87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 6: SAMPLE DATA LOADING (FIXED) =====\n",
    "def load_sample_fashion_data(fashion_db):\n",
    "    \"\"\"Load sample fashion data for testing\"\"\"\n",
    "    \n",
    "    sample_products = [\n",
    "        {\n",
    "            'name': 'Classic Blue Jeans',\n",
    "            'category': 'Bottoms',\n",
    "            'subcategory': 'Jeans',\n",
    "            'brand': 'Levi\\'s',  # Fixed HTML entity\n",
    "            'price': 79.99,\n",
    "            'color': 'Blue',\n",
    "            'size': 'M',\n",
    "            'description': 'Classic straight-leg blue jeans perfect for casual wear',\n",
    "            'style_tags': 'casual,classic,versatile',\n",
    "            'season': 'all-season',\n",
    "            'gender': 'unisex',\n",
    "            'occasion': 'casual,everyday',\n",
    "            'material': 'cotton,denim'\n",
    "        },\n",
    "        {\n",
    "            'name': 'White Cotton T-Shirt',\n",
    "            'category': 'Tops',\n",
    "            'subcategory': 'T-Shirts',\n",
    "            'brand': 'Gap',\n",
    "            'price': 19.99,\n",
    "            'color': 'White',\n",
    "            'size': 'M',\n",
    "            'description': 'Comfortable white cotton t-shirt for everyday wear',\n",
    "            'style_tags': 'basic,casual,comfortable',\n",
    "            'season': 'all-season',\n",
    "            'gender': 'unisex',\n",
    "            'occasion': 'casual,everyday',\n",
    "            'material': 'cotton'\n",
    "        },\n",
    "        {\n",
    "            'name': 'Black Leather Jacket',\n",
    "            'category': 'Outerwear',\n",
    "            'subcategory': 'Jackets',\n",
    "            'brand': 'Zara',\n",
    "            'price': 199.99,\n",
    "            'color': 'Black',\n",
    "            'size': 'M',\n",
    "            'description': 'Stylish black leather jacket for edgy looks',\n",
    "            'style_tags': 'edgy,rock,cool',\n",
    "            'season': 'fall,winter',\n",
    "            'gender': 'unisex',\n",
    "            'occasion': 'casual,party,date',\n",
    "            'material': 'leather'\n",
    "        },\n",
    "        {\n",
    "            'name': 'Summer Floral Dress',\n",
    "            'category': 'Dresses',\n",
    "            'subcategory': 'Casual Dresses',\n",
    "            'brand': 'H&M',  # Fixed HTML entity\n",
    "            'price': 49.99,\n",
    "            'color': 'Floral',\n",
    "            'size': 'M',\n",
    "            'description': 'Light and airy floral dress perfect for summer',\n",
    "            'style_tags': 'feminine,floral,light',\n",
    "            'season': 'spring,summer',\n",
    "            'gender': 'women',\n",
    "            'occasion': 'casual,date,brunch',\n",
    "            'material': 'polyester,viscose'\n",
    "        },\n",
    "        {\n",
    "            'name': 'Running Sneakers',\n",
    "            'category': 'Footwear',\n",
    "            'subcategory': 'Sneakers',\n",
    "            'brand': 'Nike',\n",
    "            'price': 129.99,\n",
    "            'color': 'White/Blue',\n",
    "            'size': '9',\n",
    "            'description': 'Comfortable running sneakers with great support',\n",
    "            'style_tags': 'sporty,athletic,comfortable',\n",
    "            'season': 'all-season',\n",
    "            'gender': 'unisex',\n",
    "            'occasion': 'sport,casual',\n",
    "            'material': 'synthetic,mesh'\n",
    "        }\n",
    "    ]\n",
    "    \n",
    "    # Add sample products to database\n",
    "    for product in sample_products:\n",
    "        fashion_db.add_product(**product)\n",
    "    \n",
    "    print(f\"✅ Loaded {len(sample_products)} sample products into database!\")\n",
    "    return sample_products\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "id": "a1613e22-4864-48cb-be3f-b1c4d9e3a5f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 7: VECTOR STORE SETUP (FAISS VERSION) =====\n",
    "from langchain_community.vectorstores import FAISS\n",
    "\n",
    "def create_fashion_vector_store(fashion_db, embeddings_model):\n",
    "    \"\"\"Create vector store from fashion database using FAISS\"\"\"\n",
    "    \n",
    "    # Get all products from database\n",
    "    products = fashion_db.get_all_products()\n",
    "    \n",
    "    if not products:\n",
    "        print(\"No products found. Loading sample data...\")\n",
    "        load_sample_fashion_data(fashion_db)\n",
    "        products = fashion_db.get_all_products()\n",
    "    \n",
    "    # Convert products to documents for vector store\n",
    "    documents = []\n",
    "    for product in products:\n",
    "        # Create document text with all product information\n",
    "        doc_text = f\"\"\"\n",
    "        Name: {product[1]}\n",
    "        Category: {product[2]} - {product[3]}\n",
    "        Brand: {product[4]}\n",
    "        Price: ${product[5]}\n",
    "        Color: {product[6]}\n",
    "        Size: {product[7]}\n",
    "        Description: {product[8]}\n",
    "        Style: {product[9]}\n",
    "        Season: {product[10]}\n",
    "        Gender: {product[11]}\n",
    "        Occasion: {product[12]}\n",
    "        Material: {product[13]}\n",
    "        \"\"\"\n",
    "        \n",
    "        # Create document with metadata\n",
    "        from langchain.docstore.document import Document\n",
    "        doc = Document(\n",
    "            page_content=doc_text.strip(),\n",
    "            metadata={\n",
    "                'product_id': product[0],\n",
    "                'name': product[1],\n",
    "                'category': product[2],\n",
    "                'brand': product[4],\n",
    "                'price': product[5],\n",
    "                'color': product[6]\n",
    "            }\n",
    "        )\n",
    "        documents.append(doc)\n",
    "    \n",
    "    # Create vector store using FAISS (more stable than ChromaDB)\n",
    "    vectorstore = FAISS.from_documents(\n",
    "        documents=documents,\n",
    "        embedding=embeddings_model\n",
    "    )\n",
    "    \n",
    "    # Save the vector store locally\n",
    "    vectorstore.save_local(\"fashion_faiss_db\")\n",
    "    \n",
    "    print(f\"✅ Created FAISS vector store with {len(documents)} fashion products!\")\n",
    "    return vectorstore\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "id": "cd1beeab-5b92-4fc7-9be5-040ca06fae5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 8: ENHANCED FASHION CHATBOT (FIXED) =====\n",
    "import re\n",
    "\n",
    "class EnhancedFashionChatbot:\n",
    "    \"\"\"Enhanced Fashion Chatbot with image upload and analysis capabilities\"\"\"\n",
    "    \n",
    "    def __init__(self, chatgpt, retriever, fashion_db, rec_engine, openai_native_client):\n",
    "        self.chatgpt = chatgpt\n",
    "        self.retriever = retriever\n",
    "        self.fashion_db = fashion_db\n",
    "        self.rec_engine = rec_engine\n",
    "        # FIXED: Use native OpenAI client for image analysis\n",
    "        self.image_analyzer = ImageAnalysisService(openai_native_client)\n",
    "        self.setup_chains()\n",
    "        \n",
    "        # Create uploads directory for images\n",
    "        self.upload_dir = \"uploads\"\n",
    "        os.makedirs(self.upload_dir, exist_ok=True)\n",
    "        print(f\"✅ Enhanced Fashion Chatbot initialized!\")\n",
    "        print(f\"📁 Upload directory created: {self.upload_dir}\")\n",
    "    \n",
    "    def setup_chains(self):\n",
    "        \"\"\"Setup LangChain conversation chains\"\"\"\n",
    "        \n",
    "        # Enhanced rephrase prompt for image context\n",
    "        rephrase_system_prompt = \"\"\"\n",
    "        You are a fashion stylist assistant with image analysis capabilities. \n",
    "        Given a conversation history and the latest user question (which might include \n",
    "        image analysis results), formulate a standalone question that captures the user's \n",
    "        fashion needs, style preferences, and visual context from uploaded images.\n",
    "        \n",
    "        Consider factors like: style preference, body type, occasion, budget, color preferences, \n",
    "        brand preferences, seasonal needs, and visual elements from uploaded images.\n",
    "        \"\"\"\n",
    "        \n",
    "        rephrase_prompt = ChatPromptTemplate.from_messages([\n",
    "            (\"system\", rephrase_system_prompt),\n",
    "            MessagesPlaceholder(\"chat_history\"),\n",
    "            (\"human\", \"{input}\"),\n",
    "        ])\n",
    "        \n",
    "        self.history_aware_retriever = create_history_aware_retriever(\n",
    "            self.chatgpt, self.retriever, rephrase_prompt\n",
    "        )\n",
    "        \n",
    "        # Enhanced QA prompt with image context\n",
    "        qa_system_prompt = \"\"\"\n",
    "        You are an expert fashion stylist and personal shopping assistant with image analysis capabilities.\n",
    "        \n",
    "        Your expertise includes:\n",
    "        - Fashion trends and seasonal styles\n",
    "        - Body types and flattering fits\n",
    "        - Color theory and coordination\n",
    "        - Brand knowledge and quality assessment\n",
    "        - Occasion-appropriate dressing\n",
    "        - Budget-conscious styling\n",
    "        - Visual analysis of uploaded fashion images\n",
    "        \n",
    "        When users upload images:\n",
    "        1. Analyze the visual elements thoroughly\n",
    "        2. Provide specific feedback on the items shown\n",
    "        3. Suggest improvements or alternatives\n",
    "        4. Recommend similar products from the database\n",
    "        5. Give styling advice based on what you see\n",
    "        \n",
    "        For each recommendation:\n",
    "        1. Explain WHY it suits the user (including visual analysis if image provided)\n",
    "        2. Suggest styling tips\n",
    "        3. Mention care instructions if relevant\n",
    "        4. Provide alternatives in different price ranges\n",
    "        5. Reference visual elements from uploaded images when relevant\n",
    "        \n",
    "        Always be friendly, helpful, and fashion-forward in your responses.\n",
    "        \n",
    "        Context: {context}\n",
    "        Image Analysis Results: {image_analysis}\n",
    "        \"\"\"\n",
    "        \n",
    "        qa_prompt = ChatPromptTemplate.from_messages([\n",
    "            (\"system\", qa_system_prompt),\n",
    "            MessagesPlaceholder(\"chat_history\"),\n",
    "            (\"human\", \"{input}\"),\n",
    "        ])\n",
    "        \n",
    "        question_answer_chain = create_stuff_documents_chain(self.chatgpt, qa_prompt)\n",
    "        self.rag_chain = create_retrieval_chain(self.history_aware_retriever, question_answer_chain)\n",
    "        \n",
    "        # Memory management with SQLite\n",
    "        def get_session_history(session_id):\n",
    "            return SQLChatMessageHistory(session_id, \"sqlite:///fashion_memory.db\")\n",
    "        \n",
    "        self.conversational_chain = RunnableWithMessageHistory(\n",
    "            self.rag_chain,\n",
    "            get_session_history,\n",
    "            input_messages_key=\"input\",\n",
    "            history_messages_key=\"chat_history\",\n",
    "            output_messages_key=\"answer\",\n",
    "        )\n",
    "        \n",
    "        print(\"✅ Conversation chains setup complete!\")\n",
    "    \n",
    "    def handle_image_upload(self, user_id, image_file_path, query=None):\n",
    "        \"\"\"Handle image upload and analysis\"\"\"\n",
    "        try:\n",
    "            # Generate unique filename\n",
    "            timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "            filename = f\"{user_id}_{timestamp}.jpg\"\n",
    "            image_path = os.path.join(self.upload_dir, filename)\n",
    "            \n",
    "            # Copy/save the image file\n",
    "            if os.path.exists(image_file_path):\n",
    "                with open(image_file_path, 'rb') as src, open(image_path, 'wb') as dst:\n",
    "                    dst.write(src.read())\n",
    "            else:\n",
    "                return {\"success\": False, \"error\": \"Image file not found\"}\n",
    "            \n",
    "            print(f\"📸 Image saved to: {image_path}\")\n",
    "            \n",
    "            # Analyze the image using AI\n",
    "            print(\"🔍 Analyzing image with AI...\")\n",
    "            image_analysis = self.image_analyzer.analyze_fashion_image(image_path, query)\n",
    "            print(\"DEBUG_IMAGE_ANALYSIS_RESULT:\", image_analysis)\n",
    "            \n",
    "            # Extract colors from image\n",
    "            print(\"🎨 Extracting color palette...\")\n",
    "            color_analysis = self.image_analyzer.extract_colors_from_image(image_path)\n",
    "            \n",
    "            # Save to database\n",
    "            image_id = self.fashion_db.save_user_image(\n",
    "                user_id=user_id,\n",
    "                image_path=image_path,\n",
    "                description=query,\n",
    "                detected_items=image_analysis.get('clothing_items') if isinstance(image_analysis, dict) else None,\n",
    "                color_analysis=color_analysis,\n",
    "                style_analysis=image_analysis.get('style_analysis') if isinstance(image_analysis, dict) else None\n",
    "            )\n",
    "            \n",
    "            # Track user behavior\n",
    "            self.fashion_db.track_user_behavior(\n",
    "                user_id, \"image_upload\", image_id=image_id, query=query\n",
    "            )\n",
    "            \n",
    "            print(\"✅ Image analysis complete!\")\n",
    "            \n",
    "            return {\n",
    "                \"success\": True,\n",
    "                \"image_id\": image_id,\n",
    "                \"image_path\": image_path,\n",
    "                \"analysis\": image_analysis,\n",
    "                \"colors\": color_analysis\n",
    "            }\n",
    "        except Exception as e:\n",
    "            print(f\"❌ Error processing image: {str(e)}\")\n",
    "            return {\"success\": False, \"error\": str(e)}\n",
    "\n",
    "    def chat_with_image_context(self, user_id, message, image_analysis=None):\n",
    "        \"\"\"Enhanced chat method with up-to-date image context. Recommends ONLY IF requested.\"\"\"\n",
    "        # Track user query\n",
    "        self.fashion_db.track_user_behavior(user_id, \"query\", query=message)\n",
    "        \n",
    "        # Detect if user is asking for recommendations\n",
    "        rec_keywords = [\n",
    "            r\"\\brecommend\\b\",\n",
    "            r\"\\bsuggest\\b\",\n",
    "            r\"\\bshow me\\b\",\n",
    "            r\"\\boptions\\b\",\n",
    "            r\"\\bcan you give me\\b\",\n",
    "            r\"\\bwhat should I buy\\b\",\n",
    "            r\"\\bgive me choices\\b\",\n",
    "            r\"\\bany (good )?(options|suggestions|recommendations)\\b\"\n",
    "        ]\n",
    "        rec_query = any(re.search(pattern, message, re.IGNORECASE) for pattern in rec_keywords)\n",
    "\n",
    "        # Only generate recommendations if user asks for them\n",
    "        if rec_query:\n",
    "            recommendations = self.rec_engine.get_personalized_recommendations(\n",
    "                user_id, message, limit=3\n",
    "            )\n",
    "        else:\n",
    "            recommendations = []\n",
    "\n",
    "        # Prepare input with fresh image context\n",
    "        enhanced_input = message\n",
    "        if image_analysis:\n",
    "            # Display analysis if no error, otherwise handle gracefully\n",
    "            if isinstance(image_analysis, dict) and image_analysis.get(\"error\"):\n",
    "                enhanced_input += f\"\\n\\n[Image analysis failed: {image_analysis.get('message', image_analysis.get('error'))}]\"\n",
    "            else:\n",
    "                image_analysis_str = json.dumps(image_analysis, indent=2)\n",
    "                enhanced_input += f\"\\n\\nImage Analysis Context: {image_analysis_str}\"\n",
    "\n",
    "        # Generate response using convo chain\n",
    "        response = self.conversational_chain.invoke(\n",
    "            {\n",
    "                \"input\": enhanced_input,\n",
    "                \"image_analysis\": json.dumps(image_analysis) if image_analysis else \"\"\n",
    "            },\n",
    "            config={\"configurable\": {\"session_id\": user_id}}\n",
    "        )\n",
    "        \n",
    "        # Track response\n",
    "        self.fashion_db.track_user_behavior(user_id, \"response_received\", query=message)\n",
    "        \n",
    "        return {\n",
    "            \"answer\": response[\"answer\"],\n",
    "            \"recommendations\": recommendations,\n",
    "            \"context_products\": [doc.metadata for doc in response.get(\"context\", [])],\n",
    "            \"user_preferences\": self.rec_engine.analyze_user_preferences(user_id),\n",
    "            \"image_analysis\": image_analysis\n",
    "        }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "id": "4142bc43-f671-4cfc-a04d-560e540c6e05",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ===== PART 9: INTERACTIVE CHAT INTERFACE =====\n",
    "def enhanced_fashion_chat_interface():\n",
    "    \"\"\"Enhanced chat interface with image upload support\"\"\"\n",
    "    \n",
    "    print(\"\\n\" + \"=\"*60)\n",
    "    print(\"👗 Welcome to your Enhanced Personal Fashion Stylist! 👗\")\n",
    "    print(\"=\"*60)\n",
    "    print(\"I can help with outfit recommendations, styling tips, and image analysis.\")\n",
    "    print(\"\\nAvailable Commands:\")\n",
    "    print(\"💬 Type your message for fashion advice\")\n",
    "    print(\"📸 Type 'upload' to upload an image for analysis\")\n",
    "    print(\"📋 Type 'history' to see your uploaded images\")\n",
    "    print(\"❌ Type 'quit' to exit\")\n",
    "    print(\"=\"*60)\n",
    "    \n",
    "    # Get user ID\n",
    "    user_id = input(\"\\n🔑 Enter your user ID: \").strip()\n",
    "    if not user_id:\n",
    "        user_id = \"default_user\"\n",
    "    \n",
    "    print(f\"\\n👋 Hello {user_id}! I'm your fashion stylist assistant.\")\n",
    "    print(\"How can I help you look amazing today?\")\n",
    "    \n",
    "    # Main chat loop\n",
    "    while True:\n",
    "        print(\"\\n\" + \"-\"*40)\n",
    "        user_input = input(f\"\\n{user_id}: \").strip()\n",
    "        \n",
    "        if user_input.lower() == 'quit':\n",
    "            print(\"\\n✨ Thanks for chatting! Stay stylish! ✨\")\n",
    "            break\n",
    "        \n",
    "        elif user_input.lower() == 'upload':\n",
    "            print(\"\\n📸 IMAGE UPLOAD MODE\")\n",
    "            image_path = input(\"Enter the full path to your image file: \").strip()\n",
    "            \n",
    "            if not image_path:\n",
    "                print(\"❌ No image path provided.\")\n",
    "                continue\n",
    "            \n",
    "            try:\n",
    "                print(\"\\n🔄 Processing your image...\")\n",
    "                \n",
    "                # Handle image upload\n",
    "                upload_result = enhanced_chatbot.handle_image_upload(\n",
    "                    user_id, image_path, \"Analyze this fashion image\"\n",
    "                )\n",
    "                \n",
    "                if upload_result[\"success\"]:\n",
    "                    print(f\"\\n✅ Image uploaded and analyzed successfully!\")\n",
    "                    print(f\"📁 Saved as: {upload_result['image_path']}\")\n",
    "                    \n",
    "                    # Display analysis results\n",
    "                    analysis = upload_result[\"analysis\"]\n",
    "                    print(f\"\\n🔍 ANALYSIS RESULTS:\")\n",
    "                    print(\"-\" * 30)\n",
    "                    \n",
    "                    if \"error\" not in analysis:\n",
    "                        if \"clothing_items\" in analysis:\n",
    "                            print(f\"👕 Items detected: {analysis['clothing_items']}\")\n",
    "                        if \"colors\" in analysis:\n",
    "                            print(f\"🎨 Color palette: {analysis['colors']}\")\n",
    "                        if \"style_analysis\" in analysis:\n",
    "                            print(f\"✨ Style analysis: {analysis['style_analysis']}\")\n",
    "                        if \"occasion\" in analysis:\n",
    "                            print(f\"🎯 Suitable for: {analysis['occasion']}\")\n",
    "                    else:\n",
    "                        print(f\"⚠️ Analysis note: {analysis.get('message', 'Basic analysis completed')}\")\n",
    "                    \n",
    "                    # Get fashion advice based on image\n",
    "                    print(\"\\n💡 Now you can ask me questions about this outfit!\")\n",
    "                    follow_up = input(\"Ask me anything about this image: \").strip()\n",
    "                    \n",
    "                    if follow_up:\n",
    "                        print(\"\\n🤖 Analyzing and responding...\")\n",
    "                        response = enhanced_chatbot.chat_with_image_context(\n",
    "                            user_id, follow_up, upload_result[\"analysis\"]\n",
    "                        )\n",
    "                        print(f\"\\n🎨 Fashion Stylist: {response['answer']}\")\n",
    "                        \n",
    "                        # Show recommendations if available\n",
    "                        if response['recommendations']:\n",
    "                            print(\"\\n💡 PERSONALIZED RECOMMENDATIONS:\")\n",
    "                            print(\"-\" * 35)\n",
    "                            for i, rec in enumerate(response['recommendations'], 1):\n",
    "                                print(f\"{i}. {rec['name']} - ${rec['price']} (ID: {rec['product_id']})\")\n",
    "                \n",
    "                else:\n",
    "                    print(f\"❌ Upload failed: {upload_result['error']}\")\n",
    "                    print(\"Please check your image path and try again.\")\n",
    "            \n",
    "            except FileNotFoundError:\n",
    "                print(\"❌ Image file not found. Please check the file path.\")\n",
    "            except Exception as e:\n",
    "                print(f\"❌ Error: {e}\")\n",
    "        \n",
    "        elif user_input.lower() == 'history':\n",
    "            print(\"\\n📋 YOUR IMAGE HISTORY:\")\n",
    "            images = enhanced_chatbot.fashion_db.get_user_images(user_id)\n",
    "            if images:\n",
    "                for i, img in enumerate(images, 1):\n",
    "                    print(f\"{i}. {img[3]} (Uploaded: {img[6]})\")\n",
    "            else:\n",
    "                print(\"No images uploaded yet.\")\n",
    "        \n",
    "        else:\n",
    "            try:\n",
    "                print(\"\\n🤖 Thinking about your fashion question...\")\n",
    "                \n",
    "                # Regular chat without image\n",
    "                response = enhanced_chatbot.chat_with_image_context(user_id, user_input)\n",
    "                \n",
    "                print(f\"\\n🎨 Fashion Stylist: {response['answer']}\")\n",
    "                \n",
    "                # Show recommendations\n",
    "                if response['recommendations']:\n",
    "                    print(\"\\n💡 PERSONALIZED RECOMMENDATIONS:\")\n",
    "                    print(\"-\" * 35)\n",
    "                    for i, rec in enumerate(response['recommendations'], 1):\n",
    "                        print(f\"{i}. {rec['name']} - ${rec['price']} ({rec['brand']})\")\n",
    "                \n",
    "                # Show user style profile\n",
    "                if response['user_preferences']['preferred_colors']:\n",
    "                    colors = ', '.join(response['user_preferences']['preferred_colors'])\n",
    "                    print(f\"\\n🎨 Your Style Profile - Favorite Colors: {colors}\")\n",
    "            \n",
    "            except Exception as e:\n",
    "                print(f\"❌ Sorry, I encountered an error: {e}\")\n",
    "                print(\"Please try rephrasing your question.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "id": "a3bd71f8-1841-40ef-b432-f4f1103841ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🚀 Initializing Enhanced Fashion Chatbot...\n",
      "\n",
      "1️⃣ Setting up database...\n",
      "✅ Database initialized successfully!\n",
      "2️⃣ Setting up recommendation engine...\n",
      "3️⃣ Creating vector store...\n",
      "✅ Created FAISS vector store with 5 fashion products!\n",
      "4️⃣ Setting up retriever...\n",
      "5️⃣ Initializing enhanced chatbot...\n",
      "✅ Conversation chains setup complete!\n",
      "✅ Enhanced Fashion Chatbot initialized!\n",
      "📁 Upload directory created: uploads\n",
      "\n",
      "✅ ALL SYSTEMS READY!\n",
      "🎉 Enhanced Fashion Chatbot with Image Upload is ready to use!\n",
      "\n",
      "============================================================\n",
      "👗 Welcome to your Enhanced Personal Fashion Stylist! 👗\n",
      "============================================================\n",
      "I can help with outfit recommendations, styling tips, and image analysis.\n",
      "\n",
      "Available Commands:\n",
      "💬 Type your message for fashion advice\n",
      "📸 Type 'upload' to upload an image for analysis\n",
      "📋 Type 'history' to see your uploaded images\n",
      "❌ Type 'quit' to exit\n",
      "============================================================\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "🔑 Enter your user ID:  23\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "👋 Hello 23! I'm your fashion stylist assistant.\n",
      "How can I help you look amazing today?\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  upload\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📸 IMAGE UPLOAD MODE\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the full path to your image file:  C:\\Users\\KIIT\\Downloads\\WhatsApp Image 2025-07-30 at 14.34.05_a721b1ed.jpg\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔄 Processing your image...\n",
      "📸 Image saved to: uploads\\23_20250730_144042.jpg\n",
      "🔍 Analyzing image with AI...\n",
      "DEBUG_IMAGE_ANALYSIS_RESULT: {'raw_analysis': '```json\\n{\\n    \"Clothing Items\": {\\n        \"T-Shirt\": \"Plain white, short-sleeved T-shirt with a relaxed fit.\",\\n        \"Jeans\": \"Loose-fitting, wide-leg blue jeans with a casual cut.\",\\n        \"Footwear\": \"White sneakers with a simple, minimalist design.\",\\n        \"Accessories\": \"Wristwatch visible on the left wrist.\"\\n    },\\n    \"Colors\": {\\n        \"Dominant Colors\": [\"White\", \"Blue\"],\\n        \"Overall Palette\": \"Neutral and classic, with a focus on blue and white.\"\\n    },\\n    \"Style Analysis\": {\\n        \"Fashion Style\": \"Casual and laid-back.\",\\n        \"Aesthetic\": \"Minimalist with a hint of streetwear influence.\",\\n        \"Overall Vibe\": \"Relaxed and effortless.\"\\n    },\\n    \"Occasion\": \"Appropriate for casual outings, running errands, or a day out with friends.\",\\n    \"Season\": \"Suitable for spring and summer due to the light fabrics and short sleeves.\",\\n    \"Body Type\": \"Flattering for most body types, especially those who prefer a relaxed silhouette.\",\\n    \"Styling Tips\": \"Add a denim or bomber jacket for layering. Consider accessorizing with a cap or sunglasses for a more distinct street look.\",\\n    \"Similar Items\": {\\n        \"T-Shirt\": \"Crewneck or V-neck t-shirts in various colors.\",\\n        \"Jeans\": \"Relaxed-fit chinos or cargo pants.\",\\n        \"Footwear\": \"Canvas sneakers or slip-ons.\"\\n    }\\n}\\n```', 'clothing_items': 'Analysis available in raw_analysis', 'colors': 'Analysis available in raw_analysis', 'style_analysis': 'Analysis available in raw_analysis'}\n",
      "🎨 Extracting color palette...\n",
      "✅ Image analysis complete!\n",
      "\n",
      "✅ Image uploaded and analyzed successfully!\n",
      "📁 Saved as: uploads\\23_20250730_144042.jpg\n",
      "\n",
      "🔍 ANALYSIS RESULTS:\n",
      "------------------------------\n",
      "👕 Items detected: Analysis available in raw_analysis\n",
      "🎨 Color palette: Analysis available in raw_analysis\n",
      "✨ Style analysis: Analysis available in raw_analysis\n",
      "\n",
      "💡 Now you can ask me questions about this outfit!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ask me anything about this image:  what is this image all about?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🤖 Analyzing and responding...\n",
      "\n",
      "🎨 Fashion Stylist: The image depicts a casual and laid-back outfit consisting of:\n",
      "\n",
      "1. **T-Shirt**: A plain white, short-sleeved T-shirt with a relaxed fit, offering comfort and versatility.\n",
      "2. **Jeans**: Loose-fitting, wide-leg blue jeans with a casual cut, providing a relaxed silhouette.\n",
      "3. **Footwear**: White sneakers with a simple, minimalist design, adding to the overall clean and effortless look.\n",
      "4. **Accessories**: A wristwatch visible on the left wrist, adding a subtle touch of style.\n",
      "\n",
      "**Color Palette**: The dominant colors are white and blue, creating a neutral and classic palette that is easy to coordinate with other pieces.\n",
      "\n",
      "**Style Analysis**: The outfit embodies a minimalist aesthetic with a hint of streetwear influence, resulting in a relaxed and effortless vibe. It's perfect for casual outings, running errands, or spending a day out with friends.\n",
      "\n",
      "**Seasonal Suitability**: The light fabrics and short sleeves make this outfit ideal for spring and summer.\n",
      "\n",
      "**Body Type**: This ensemble is flattering for most body types, especially those who prefer a relaxed silhouette.\n",
      "\n",
      "**Styling Tips**:\n",
      "- For added warmth or style, layer with a denim or bomber jacket.\n",
      "- Consider accessorizing with a cap or sunglasses for a more distinct street look.\n",
      "\n",
      "**Similar Items**:\n",
      "- For the T-shirt, consider crewneck or V-neck options in various colors.\n",
      "- For the jeans, relaxed-fit chinos or cargo pants offer a similar casual vibe.\n",
      "- For footwear, canvas sneakers or slip-ons can be great alternatives.\n",
      "\n",
      "This outfit is all about comfort and simplicity, making it a go-to choice for everyday casual wear.\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  upload\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📸 IMAGE UPLOAD MODE\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the full path to your image file:  C:\\Users\\KIIT\\Downloads\\WhatsApp Image 2025-07-30 at 14.34.17_60be60cb.jpg\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔄 Processing your image...\n",
      "📸 Image saved to: uploads\\23_20250730_144229.jpg\n",
      "🔍 Analyzing image with AI...\n",
      "DEBUG_IMAGE_ANALYSIS_RESULT: {'raw_analysis': '```json\\n{\\n    \"Clothing Items\": {\\n        \"Description\": \"A plain short-sleeve t-shirt with a round neckline.\",\\n        \"Material\": \"Appears to be a soft cotton or cotton blend.\"\\n    },\\n    \"Colors\": {\\n        \"Dominant Colors\": [\"Blue\"],\\n        \"Overall Color Palette\": [\"Solid blue with a vibrant tone\"]\\n    },\\n    \"Style Analysis\": {\\n        \"Fashion Style\": \"Casual and minimalistic\",\\n        \"Aesthetic\": \"Simple and versatile, suitable for a relaxed look\",\\n        \"Overall Vibe\": \"Comfortable and laid-back\"\\n    },\\n    \"Occasion\": {\\n        \"Suitable Occasions\": [\"Everyday casual wear\", \"Informal gatherings\", \"Outdoor activities\"]\\n    },\\n    \"Season\": {\\n        \"Appropriate Season\": [\"Spring\", \"Summer\"]\\n    },\\n    \"Body Type\": {\\n        \"Flattering For\": [\"Versatile for most body types as it has a relaxed fit\"]\\n    },\\n    \"Styling Tips\": {\\n        \"Advice\": [\\n            \"Pair with jeans or shorts for a casual look.\",\\n            \"Layer under a jacket or overshirt for added style.\",\\n            \"Accessorize with a simple watch or bracelet.\"\\n        ]\\n    },\\n    \"Similar Items\": {\\n        \"Suggestions\": [\\n            \"Basic white or black t-shirts\",\\n            \"Graphic tees with simple designs\",\\n            \"V-neck t-shirts for a variation in neckline\"\\n        ]\\n    }\\n}\\n```', 'clothing_items': 'Analysis available in raw_analysis', 'colors': 'Analysis available in raw_analysis', 'style_analysis': 'Analysis available in raw_analysis'}\n",
      "🎨 Extracting color palette...\n",
      "✅ Image analysis complete!\n",
      "\n",
      "✅ Image uploaded and analyzed successfully!\n",
      "📁 Saved as: uploads\\23_20250730_144229.jpg\n",
      "\n",
      "🔍 ANALYSIS RESULTS:\n",
      "------------------------------\n",
      "👕 Items detected: Analysis available in raw_analysis\n",
      "🎨 Color palette: Analysis available in raw_analysis\n",
      "✨ Style analysis: Analysis available in raw_analysis\n",
      "\n",
      "💡 Now you can ask me questions about this outfit!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ask me anything about this image:  what is this image all about ?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🤖 Analyzing and responding...\n",
      "\n",
      "🎨 Fashion Stylist: The image showcases a plain short-sleeve t-shirt with a round neckline, made from a soft cotton or cotton blend. The dominant color is a vibrant blue, creating a solid and striking tone.\n",
      "\n",
      "**Style Analysis**: The t-shirt embodies a casual and minimalistic fashion style, offering a simple and versatile aesthetic suitable for a relaxed look. The overall vibe is comfortable and laid-back, making it an excellent choice for everyday wear.\n",
      "\n",
      "**Occasions**: This t-shirt is perfect for everyday casual wear, informal gatherings, and outdoor activities, providing both comfort and style.\n",
      "\n",
      "**Seasonal Suitability**: It is ideal for spring and summer due to its lightweight material and short sleeves.\n",
      "\n",
      "**Body Type**: The relaxed fit makes it versatile and flattering for most body types.\n",
      "\n",
      "**Styling Tips**:\n",
      "- Pair the t-shirt with jeans or shorts for a classic casual look.\n",
      "- For added style, layer it under a jacket or overshirt.\n",
      "- Accessorize with a simple watch or bracelet to enhance the outfit.\n",
      "\n",
      "**Similar Items**:\n",
      "- Consider basic white or black t-shirts for a neutral alternative.\n",
      "- Explore graphic tees with simple designs for a bit of personality.\n",
      "- V-neck t-shirts offer a variation in neckline for a different look.\n",
      "\n",
      "This t-shirt is a wardrobe staple, providing a foundation for numerous casual outfits.\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  upload \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📸 IMAGE UPLOAD MODE\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the full path to your image file:  C:\\Users\\KIIT\\Downloads\\WhatsApp Image 2025-07-30 at 14.36.46_d2e259bb.jpg\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔄 Processing your image...\n",
      "📸 Image saved to: uploads\\23_20250730_144503.jpg\n",
      "🔍 Analyzing image with AI...\n",
      "DEBUG_IMAGE_ANALYSIS_RESULT: {'raw_analysis': '```json\\n{\\n    \"Clothing Items\": {\\n        \"1\": \"High Heels - Dark blue stiletto heels.\",\\n        \"2\": \"Handbag - Large, brown leather handbag.\",\\n        \"3\": \"Wallet - Brown leather wallet with stitching.\",\\n        \"4\": \"Watch - Gold wristwatch with a black face.\",\\n        \"5\": \"Cufflinks - Gold cufflinks.\",\\n        \"6\": \"Necklace - Pearl necklace.\",\\n        \"7\": \"Tie - Solid purple tie.\",\\n        \"8\": \"Sunglasses - Aviator style with dark lenses.\",\\n        \"9\": \"Scarf - Dark purple knit scarf.\",\\n        \"10\": \"Jewelry Box - Purple jewelry box.\"\\n    },\\n    \"Colors\": {\\n        \"Dominant Colors\": [\"Brown\", \"Purple\", \"Gold\", \"Dark Blue\"],\\n        \"Overall Palette\": [\"Neutral Browns\", \"Rich Purples\", \"Gold highlights\", \"Dark Blues\"]\\n    },\\n    \"Style Analysis\": {\\n        \"Fashion Style\": \"Classic and Elegant\",\\n        \"Aesthetic\": \"Sophisticated with a touch of luxury.\",\\n        \"Overall Vibe\": \"Timeless and Polished.\"\\n    },\\n    \"Occasion\": {\\n        \"Suitable For\": [\"Business Meetings\", \"Formal Events\", \"Evening Functions\"]\\n    },\\n    \"Season\": {\\n        \"Appropriate For\": [\"Autumn\", \"Winter\"]\\n    },\\n    \"Body Type\": {\\n        \"Flatter\": \"Items such as high heels and the tailored bag complement most body types due to their classic styles.\"\\n    },\\n    \"Styling Tips\": {\\n        \"Advice\": \"Pair the purple scarf and tie with neutral clothing for a pop of color. Match the gold watch and cufflinks with similar-toned jewelry for cohesion.\"\\n    },\\n    \"Similar Items\": {\\n        \"Suggestions\": \"Seek out burgundy accessories for a seasonal alternative or consider silver jewelry for a cooler undertone.\"\\n    }\\n}\\n```', 'clothing_items': 'Analysis available in raw_analysis', 'colors': 'Analysis available in raw_analysis', 'style_analysis': 'Analysis available in raw_analysis'}\n",
      "🎨 Extracting color palette...\n",
      "✅ Image analysis complete!\n",
      "\n",
      "✅ Image uploaded and analyzed successfully!\n",
      "📁 Saved as: uploads\\23_20250730_144503.jpg\n",
      "\n",
      "🔍 ANALYSIS RESULTS:\n",
      "------------------------------\n",
      "👕 Items detected: Analysis available in raw_analysis\n",
      "🎨 Color palette: Analysis available in raw_analysis\n",
      "✨ Style analysis: Analysis available in raw_analysis\n",
      "\n",
      "💡 Now you can ask me questions about this outfit!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ask me anything about this image:  what is this image all about ?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🤖 Analyzing and responding...\n",
      "\n",
      "🎨 Fashion Stylist: The image features a collection of accessories and footwear that exude a classic and elegant style. Here's a breakdown of the items:\n",
      "\n",
      "1. **High Heels**: Dark blue stiletto heels, adding height and sophistication.\n",
      "2. **Handbag**: A large, brown leather handbag, offering both style and functionality.\n",
      "3. **Wallet**: A brown leather wallet with stitching, complementing the handbag.\n",
      "4. **Watch**: A gold wristwatch with a black face, providing a luxurious touch.\n",
      "5. **Cufflinks**: Gold cufflinks, perfect for formal attire.\n",
      "6. **Necklace**: A pearl necklace, adding a timeless elegance.\n",
      "7. **Tie**: A solid purple tie, offering a pop of color.\n",
      "8. **Sunglasses**: Aviator style with dark lenses, adding a cool, classic vibe.\n",
      "9. **Scarf**: A dark purple knit scarf, perfect for adding warmth and style.\n",
      "10. **Jewelry Box**: A purple jewelry box, ideal for storing these elegant pieces.\n",
      "\n",
      "**Color Palette**: The dominant colors include neutral browns, rich purples, gold highlights, and dark blues, creating a sophisticated and luxurious aesthetic.\n",
      "\n",
      "**Style Analysis**: The overall fashion style is classic and elegant, with a sophisticated touch of luxury. The vibe is timeless and polished, making these items suitable for various formal occasions.\n",
      "\n",
      "**Occasions**: These items are perfect for business meetings, formal events, and evening functions, where a polished and elegant appearance is desired.\n",
      "\n",
      "**Seasonal Suitability**: The collection is appropriate for autumn and winter, with items like the scarf providing additional warmth.\n",
      "\n",
      "**Body Type**: The high heels and tailored handbag complement most body types due to their classic styles.\n",
      "\n",
      "**Styling Tips**:\n",
      "- Pair the purple scarf and tie with neutral clothing to add a pop of color.\n",
      "- Match the gold watch and cufflinks with similar-toned jewelry for a cohesive look.\n",
      "\n",
      "**Similar Items**:\n",
      "- Consider burgundy accessories for a seasonal alternative.\n",
      "- Silver jewelry can offer a cooler undertone for those who prefer it.\n",
      "\n",
      "This collection is perfect for anyone looking to achieve a sophisticated and timeless look.\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  upload\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📸 IMAGE UPLOAD MODE\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the full path to your image file:  C:\\Users\\KIIT\\Downloads\\WhatsApp Image 2025-07-30 at 14.37.10_9ced2b8f.jpg\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔄 Processing your image...\n",
      "📸 Image saved to: uploads\\23_20250730_144745.jpg\n",
      "🔍 Analyzing image with AI...\n",
      "DEBUG_IMAGE_ANALYSIS_RESULT: {'raw_analysis': '```json\\n{\\n  \"Clothing Items\": [\\n    {\\n      \"Type\": \"Top\",\\n      \"Description\": \"Light green ribbed crop top with a twist front detail.\"\\n    },\\n    {\\n      \"Type\": \"Jeans\",\\n      \"Description\": \"High-waisted wide-leg denim jeans with button detailing along the sides.\"\\n    },\\n    {\\n      \"Type\": \"Footwear\",\\n      \"Description\": \"White and beige sneakers with a casual design.\"\\n    }\\n  ],\\n  \"Colors\": {\\n    \"Dominant Colors\": [\"Light Green\", \"Blue Denim\", \"White\", \"Beige\"],\\n    \"Color Palette\": \"Casual and fresh with light and neutral tones.\"\\n  },\\n  \"Style Analysis\": {\\n    \"Fashion Style\": \"Casual chic with a modern, relaxed vibe.\",\\n    \"Aesthetic\": \"Effortless, trendy, and youthful.\"\\n  },\\n  \"Occasion\": \"Suitable for casual outings, shopping trips, or brunch with friends.\",\\n  \"Season\": \"Best for spring and summer due to the light fabric and crop style.\",\\n  \"Body Type\": \"Flattering for hourglass and athletic body types due to the emphasis on the waist and the flowy nature of the jeans.\",\\n  \"Styling Tips\": [\\n    \"Add a light denim jacket for cooler weather.\",\\n    \"Opt for minimal jewelry to keep the focus on the outfit\\'s silhouette.\",\\n    \"Consider a small crossbody bag in a neutral tone.\"\\n  ],\\n  \"Similar Items\": [\\n    \"High-waisted flare jeans\",\\n    \"Cropped ribbed tank tops\",\\n    \"Casual white sneakers\"\\n  ]\\n}\\n```', 'clothing_items': 'Analysis available in raw_analysis', 'colors': 'Analysis available in raw_analysis', 'style_analysis': 'Analysis available in raw_analysis'}\n",
      "🎨 Extracting color palette...\n",
      "✅ Image analysis complete!\n",
      "\n",
      "✅ Image uploaded and analyzed successfully!\n",
      "📁 Saved as: uploads\\23_20250730_144745.jpg\n",
      "\n",
      "🔍 ANALYSIS RESULTS:\n",
      "------------------------------\n",
      "👕 Items detected: Analysis available in raw_analysis\n",
      "🎨 Color palette: Analysis available in raw_analysis\n",
      "✨ Style analysis: Analysis available in raw_analysis\n",
      "\n",
      "💡 Now you can ask me questions about this outfit!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ask me anything about this image:  what is this image all about ?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🤖 Analyzing and responding...\n",
      "\n",
      "🎨 Fashion Stylist: The image showcases a stylish and casual outfit consisting of:\n",
      "\n",
      "1. **Top**: A light green ribbed crop top with a twist front detail, adding a trendy and youthful touch.\n",
      "2. **Jeans**: High-waisted wide-leg denim jeans with button detailing along the sides, offering a modern and relaxed fit.\n",
      "3. **Footwear**: White and beige sneakers with a casual design, providing comfort and a laid-back vibe.\n",
      "\n",
      "**Color Palette**: The dominant colors include light green, blue denim, white, and beige, creating a casual and fresh look with light and neutral tones.\n",
      "\n",
      "**Style Analysis**: The outfit embodies a casual chic style with a modern, relaxed vibe. It is effortless, trendy, and youthful, making it perfect for those who enjoy a fashionable yet comfortable look.\n",
      "\n",
      "**Occasions**: This ensemble is suitable for casual outings, shopping trips, or brunch with friends, offering both style and ease.\n",
      "\n",
      "**Seasonal Suitability**: The light fabric and crop style make it ideal for spring and summer.\n",
      "\n",
      "**Body Type**: The outfit is particularly flattering for hourglass and athletic body types due to the emphasis on the waist and the flowy nature of the jeans.\n",
      "\n",
      "**Styling Tips**:\n",
      "- Add a light denim jacket for cooler weather to maintain the casual chic aesthetic.\n",
      "- Opt for minimal jewelry to keep the focus on the outfit's silhouette.\n",
      "- Consider a small crossbody bag in a neutral tone to complement the look.\n",
      "\n",
      "**Similar Items**:\n",
      "- High-waisted flare jeans for a different silhouette.\n",
      "- Cropped ribbed tank tops for a similar top style.\n",
      "- Casual white sneakers for alternative footwear options.\n",
      "\n",
      "This outfit is perfect for anyone looking to achieve a trendy and relaxed look while staying comfortable and stylish.\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  upload\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📸 IMAGE UPLOAD MODE\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the full path to your image file:  C:\\Users\\KIIT\\Downloads\\WhatsApp Image 2025-07-30 at 14.38.08_99574078.jpg\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🔄 Processing your image...\n",
      "📸 Image saved to: uploads\\23_20250730_144920.jpg\n",
      "🔍 Analyzing image with AI...\n",
      "DEBUG_IMAGE_ANALYSIS_RESULT: {'raw_analysis': '```json\\n{\\n    \"Clothing Items\": [\\n        {\\n            \"Type\": \"Shirt\",\\n            \"Description\": \"Short-sleeve button-up shirt with a bold graphic print featuring various cartoonish illustrations and patterns.\"\\n        }\\n    ],\\n    \"Colors\": {\\n        \"Dominant Colors\": [\"Red\", \"Black\", \"Blue\", \"Pink\", \"Yellow\"],\\n        \"Overall Color Palette\": \"Vibrant and multicolored with high contrast.\"\\n    },\\n    \"Style Analysis\": {\\n        \"Fashion Style\": \"Playful and eclectic\",\\n        \"Aesthetic\": \"Streetwear with a focus on bold visuals\",\\n        \"Overall Vibe\": \"Fun and youthful\"\\n    },\\n    \"Occasion\": [\\n        \"Casual outings\",\\n        \"Music festivals\",\\n        \"Art events\"\\n    ],\\n    \"Season\": \"Spring and Summer\",\\n    \"Body Type\": \"This shirt is versatile and can flatter various body types; however, the bold patterns may be more appealing to those comfortable with attention-grabbing pieces.\",\\n    \"Styling Tips\": [\\n        \"Pair with solid-colored shorts or pants to balance the vivid pattern.\",\\n        \"Accessorize with minimalistic jewelry to keep the focus on the shirt.\",\\n        \"Consider pairing with sneakers or casual footwear.\"\\n    ],\\n    \"Similar Items\": [\\n        \"Graphic tees\",\\n        \"Patterned hoodies\",\\n        \"Color-block jackets\"\\n    ]\\n}\\n```', 'clothing_items': 'Analysis available in raw_analysis', 'colors': 'Analysis available in raw_analysis', 'style_analysis': 'Analysis available in raw_analysis'}\n",
      "🎨 Extracting color palette...\n",
      "✅ Image analysis complete!\n",
      "\n",
      "✅ Image uploaded and analyzed successfully!\n",
      "📁 Saved as: uploads\\23_20250730_144920.jpg\n",
      "\n",
      "🔍 ANALYSIS RESULTS:\n",
      "------------------------------\n",
      "👕 Items detected: Analysis available in raw_analysis\n",
      "🎨 Color palette: Analysis available in raw_analysis\n",
      "✨ Style analysis: Analysis available in raw_analysis\n",
      "\n",
      "💡 Now you can ask me questions about this outfit!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ask me anything about this image:  what is image all about ?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🤖 Analyzing and responding...\n",
      "\n",
      "🎨 Fashion Stylist: The image features a short-sleeve button-up shirt with a bold graphic print, showcasing various cartoonish illustrations and patterns. This shirt is characterized by its vibrant and multicolored palette, with dominant colors including red, black, blue, pink, and yellow, creating a high-contrast and eye-catching look.\n",
      "\n",
      "**Style Analysis**: The shirt embodies a playful and eclectic fashion style, with an aesthetic rooted in streetwear that emphasizes bold visuals. The overall vibe is fun and youthful, making it a standout piece in any wardrobe.\n",
      "\n",
      "**Occasions**: This shirt is perfect for casual outings, music festivals, and art events, where a lively and expressive outfit is appreciated.\n",
      "\n",
      "**Seasonal Suitability**: It is best suited for spring and summer, thanks to its light fabric and short sleeves.\n",
      "\n",
      "**Body Type**: The shirt is versatile and can flatter various body types. However, the bold patterns are particularly appealing to those who enjoy attention-grabbing pieces.\n",
      "\n",
      "**Styling Tips**:\n",
      "- Pair the shirt with solid-colored shorts or pants to balance the vivid pattern and keep the focus on the shirt.\n",
      "- Accessorize with minimalistic jewelry to maintain the emphasis on the shirt's design.\n",
      "- Consider pairing with sneakers or casual footwear to complete the streetwear look.\n",
      "\n",
      "**Similar Items**:\n",
      "- Graphic tees for a similar bold visual appeal.\n",
      "- Patterned hoodies for a layered look.\n",
      "- Color-block jackets for a different take on vibrant fashion.\n",
      "\n",
      "This shirt is ideal for anyone looking to make a bold fashion statement while embracing a youthful and energetic style.\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  history\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "📋 YOUR IMAGE HISTORY:\n",
      "1. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "2. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "3. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "4. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "5. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "6. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "7. Analyze this fashion image (Uploaded: \"Analysis available in raw_analysis\")\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  recommened something from the 2nd image what what should i wear ?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🤖 Thinking about your fashion question...\n",
      "\n",
      "🎨 Fashion Stylist: Based on the second image, which features a light green ribbed crop top, high-waisted wide-leg denim jeans, and white and beige sneakers, I recommend the following outfit combination:\n",
      "\n",
      "**Top**: Stick with the **Light Green Ribbed Crop Top**. Its twist front detail adds a trendy touch, and the light green color is perfect for spring and summer.\n",
      "\n",
      "**Bottoms**: Pair the top with the **Classic Blue Jeans** from Levi's. These jeans offer a classic straight-leg fit that complements the crop top's modern style. The blue color will harmonize well with the light green, creating a fresh and balanced look.\n",
      "\n",
      "**Footwear**: Continue with the **White and Beige Sneakers**. They provide a casual and comfortable foundation for the outfit, perfect for a day out.\n",
      "\n",
      "**Accessories**:\n",
      "- Consider adding a **light denim jacket** for cooler weather, which will layer nicely over the crop top.\n",
      "- Opt for minimal jewelry, such as a simple bracelet or stud earrings, to keep the focus on the outfit's silhouette.\n",
      "- A **small crossbody bag** in a neutral tone, like beige or tan, will complement the sneakers and add functionality.\n",
      "\n",
      "**Styling Tips**:\n",
      "- Tuck the crop top slightly into the jeans to emphasize the waist and create a flattering silhouette.\n",
      "- If you want to add a bit more color, consider a scarf or headband in a complementary shade.\n",
      "\n",
      "This outfit is perfect for casual outings, shopping trips, or brunch with friends, offering a blend of comfort, style, and trendiness.\n",
      "\n",
      "🎨 Your Style Profile - Favorite Colors: blue, black, white\n",
      "\n",
      "----------------------------------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "23:  quit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✨ Thanks for chatting! Stay stylish! ✨\n"
     ]
    }
   ],
   "source": [
    "# ===== PART 10: MAIN EXECUTION (FIXED) =====\n",
    "\n",
    "# Initialize all components\n",
    "print(\"🚀 Initializing Enhanced Fashion Chatbot...\")\n",
    "\n",
    "# 1. Initialize database\n",
    "print(\"\\n1️⃣ Setting up database...\")\n",
    "fashion_db = FashionDatabase()\n",
    "\n",
    "# 2. Initialize recommendation engine\n",
    "print(\"2️⃣ Setting up recommendation engine...\")\n",
    "rec_engine = FashionRecommendationEngine(fashion_db)\n",
    "\n",
    "# 3. Create vector store\n",
    "print(\"3️⃣ Creating vector store...\")\n",
    "vectorstore = create_fashion_vector_store(fashion_db, openai_embed_model)\n",
    "\n",
    "# 4. Create retriever\n",
    "print(\"4️⃣ Setting up retriever...\")\n",
    "fashion_retriever = vectorstore.as_retriever(\n",
    "    search_type=\"similarity\", \n",
    "    search_kwargs={\"k\": 5}\n",
    ")\n",
    "\n",
    "# 5. Initialize enhanced chatbot with FIXED parameters\n",
    "print(\"5️⃣ Initializing enhanced chatbot...\")\n",
    "enhanced_chatbot = EnhancedFashionChatbot(\n",
    "    chatgpt, fashion_retriever, fashion_db, rec_engine, openai_native_client  # FIXED: Added native client\n",
    ")\n",
    "\n",
    "print(\"\\n✅ ALL SYSTEMS READY!\")\n",
    "print(\"🎉 Enhanced Fashion Chatbot with Image Upload is ready to use!\")\n",
    "\n",
    "# Start the chat interface\n",
    "enhanced_fashion_chat_interface()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6743b9c9-7877-46fb-9e12-29c74d4b7a51",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a921d27-fc55-43b5-938b-d31c0fef85b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3d2c865-1e85-45e5-b634-52175a739cf6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26a70ff5-96f2-4f94-97f7-87d65c0f72f6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "748ebcfe-7e45-4a4b-aa97-9f3356235ce4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21947e81-adb3-4708-868f-b6c45f7c3fbf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2178f18-447e-4555-8326-13638e982bda",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b171e51a-b8b5-4e79-acdc-d7a42bbaffd6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dba114c4-02b8-4d60-b943-2d121a09fa56",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7efca97b-17f5-4c09-8b53-fb2dabc559e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9e8651c-eb33-49c0-8bcb-16add3eb8c1d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
